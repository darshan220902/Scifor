Polynomial Regression

Polynomial Regression is a regression algorithm that models the relationship between a dependent(y) and independent variable(x) as nth degree polynomial

y= b0+b1x1+ b2x12+ b2x13+...... bnx1n

Why Polynomial Regression

If we apply a linear model on a linear dataset, then it provides us a good result as we have done in Linear Regression, but if we apply the same model without any modification on a non-linear dataset, then it will produce a drastic output.


code -
     from sklearn.linear_model import LinearRegression  
     from sklearn.preprocessing import PolynomialFeatures  
     poly_regs= PolynomialFeatures(degree= 2)  
     x_poly= poly_regs.fit_transform(x)  # we are converting our feature matrix into polynomial feature matrix
     lin_reg =LinearRegression()  
     lin_reg.fit(x_poly, y)  


KNN Algorithm

K-Nearest Neighbour is Supervised Learning technique.

K-NN algorithm assumes the similarity between the new case and available cases and put the new case into the category that is most similar to the available categories.

Working-
      Step-1: Select the number K of the neighbors # Large values for K are good
      Step-2: Calculate the Euclidean distance of K number of neighbors
      Step-3: Take the K nearest neighbors as per the calculated Euclidean distance.
      Step-4: Among these k neighbors, count the number of the data points in each category.
      Step-5: Assign the new data points to that category for which the number of the neighbor is maximum.
      Step-6: Our model is ready.

Code-
import pandas as pd  
  
#importing datasets  
data_set= pd.read_csv('data.csv')  
  
 
x= data_set.iloc[:, [1,3]].values  
y= data_set.iloc[:, 4].values  
   
from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.25, random_state=0)  
  
 
from sklearn.preprocessing import StandardScaler    
st_x= StandardScaler()    
x_train= st_x.fit_transform(x_train)    
x_test= st_x.transform(x_test)  


from sklearn.neighbors import KNeighborsClassifier   # implement KNN
classifier= KNeighborsClassifier(n_neighbors=5, p=2 )   # n_neighbors: To define the required neighbors of the algorithm.
classifier.fit(x_train, y_train)  

y_pred= classifier.predict(x_test)  
